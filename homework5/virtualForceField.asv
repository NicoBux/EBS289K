function gamma = virtualForceField(q,R,C,Xmax,Ymax,T,wSize,Fcr,Fct,omegap)

% DEFINITION:
% Function assumes an attractive force field and a repulsive force field
% around the robot and calculate the steering angle given for reactive
% navigation.

% INPUTS: q = robot pose [x,y,theta]; R and C = Rows and Columns
% -> discretization of physical space in a grid [pixels];
% Xmax and Ymax: Physical dimensions of space [m]; T = target location
% (x,y); wSize = search window size [m x m]; Fcr and Fa = Force constants.

% OUTPUTS:
% omegap = Steering angle.

%% 
% x and y are robot coordinates in the world frame, wX and wY are window
% size in (min-max) in world frame; wij are window size in pixels; robotij
% are robot coordinates in pixels
global bitmap;
if isempty(bitmap)
    bitmap = zeros(R,C);
end
% persistent ompegap;
% if isempty(omegap)
%     omegap = 0;
% end

x = q(1); y = q(2); theta = q(3);
%wSize = [3.3 3.3];
%x = 1;
%y = 2;
%[roboti,roboti] = XYtoIJ(x,y,Xmax,Ymax,R,C);
wXmin = x-wSize(1); wYmin = y-wSize(2); wXmax = x+wSize(1); wYmax = y+wSize(2);
[iMin,jMin] = XYtoIJ(wXmin,wYmin,Xmax,Ymax,R,C);%SW corner of window
[iMax,jMax] = XYtoIJ(wXmax,wYmax,Xmax,Ymax,R,C);%NE corner of window
iMin2 = min(iMin,iMax); iMax2 = max(iMin,iMax);
jMin2 = min(jMin,jMax); jMax2 = max(jMin,jMax);
%% Calculation of Repulsive forcers
Frx = zeros(iMax2-iMin2,jMax2-jMin2);
Fry = zeros(iMax2-iMin2,jMax2-jMin2);
for i=iMin2:iMax2
    for j=jMin2:jMax2
        i
        j
        if bitmap(i,j) > 0.8 %meaning there's an object
            [wX,wY] = IJtoXY(i,j,Xmax,Ymax,R,C); %coordinates in m of current position of the window
            dx = abs(wX-x);
            dy = abs(wY-y);
            d = sqrt(dx*dx+dy*dy); %distance from current window pixel to the robot in m
            Frx(i,j) = Fcr*bitmap(i,j)/(d*d)*(dx/d); %force component in xhat
            Fry(i,j) = Fcr*bitmap(i,j)/(d*d)*(dy/d); %force component in yhat
        end
    end
end
Fr(1) = sum(Frx(:)); %sum of force in xhat
Fr(2) = sum(Fry(:)); %sum of force in yhat

%% Calculation of Attraction forcers
xT = T(1); yT = T(2);
dxT = abs(xT-x); dyT = abs(yT-y);
dT = sqrt(dxT*dxT+dyT*dyT);
Fax = Fct*ones(iMax2-iMin2,jMax2-jMin2);
Fay = Fax;
Fax = Fax.*dxT/dT;
Fay = Fay.*dyT/dT;

Ft(1) = sum(Fax(:)); %sum of force in xhat
Ft(2) = sum(Fay(:)); %sum of force in yhat

FT(1) = Ft(1)-Fr(1); %Resultant in xhat
FT(2) = Ft(2)-Fr(2); %Resultant in yhat

w = 2; %force gain;
FT(1) = w*FT(1)+(1-w)*FT(1)*-cos(theta); %fine tune of forces
FT(2) = w*FT(2)+(1-w)*FT(2)*-cos(theta); %fine tune of forces

mag = sqrt(FT(1)*FT(1)+FT(2)*FT(2)); %Force magnitude
Fx = FT(1)/mag;
Fy = FT(2)/mag;


delta = atan(Fy/Fx);
Ks = 1;
omega = Ks*angdiff(delta,theta);
T = 0.1; %sampling rate;
tal = 0.1; %time constant of the lowpass filter
gamma = (T*omega+(tal-T)*omegap)/tal;
